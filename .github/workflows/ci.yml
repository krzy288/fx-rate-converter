name: CI Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]


jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      working-directory: backend
      run: | 
        python -m pip install --upgrade pip 
        pip install -r requirements.txt

    - name: Run basic FastAPI checkout
      working-directory: backend
      run: |
        python -c "import main; print('âœ… App module loaded successfully')" 

    - name: Build docker image
      run: |
        docker build -t fx-converter .

    - name: Run docker container 
      run: | 
        docker run -d -p 8000:8000 --name fx-app fx-converter

    - name: Test if app is live (basic check)
      run: |
        sleep 3
        curl -f http://localhost:8000/docs
        
    - name: Test if app is live (welcome page)
      run: |
        sleep 3
        curl -f http://localhost:8000/

  deploy: 
    needs: build-test
    runs-on: ubuntu-latest

    steps:
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            cd ~/fx-converter
            git pull origin master
            docker stop fx-app || true && docker rm fx-app || true
            docker build -t fx-app .
            docker run -d -p 8000:8000 --name fx-app fx-app
          EOF

      - name: Clean up old images
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            # Remove all but the 2 latest fx-app images
            docker images --format '{{.Repository}}:{{.Tag}} {{.ID}}' | grep '^fx-app:' | grep -v '<none>' | awk 'NR>2 {print \$2}' | xargs -r docker rmi
            # Remove all dangling images (tagged as <none>)
            docker images -f "dangling=true" -q | xargs -r docker rmi
          EOF
